// Implementation file for parser generated by fsyacc
module MicroCParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "MicroCParser.fsy"

open MicroCTypes

# 10 "MicroCParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | INTDECLARE
  | FST
  | SND
  | LPAR
  | RPAR
  | ARRAYDECLARESTART
  | ARRAYDECLAREEND
  | CURLYSTART
  | CURLYEND
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | POWER
  | MODULO
  | WHILE
  | IF
  | ELSE
  | SEMI
  | ASSIGN
  | READ
  | WRITE
  | NOT
  | EQ
  | NEQ
  | L
  | G
  | LE
  | GE
  | AND
  | OR
  | TRUE
  | FALSE
  | INT of (int)
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INTDECLARE
    | TOKEN_FST
    | TOKEN_SND
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_ARRAYDECLARESTART
    | TOKEN_ARRAYDECLAREEND
    | TOKEN_CURLYSTART
    | TOKEN_CURLYEND
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULTIPLY
    | TOKEN_DIVIDE
    | TOKEN_POWER
    | TOKEN_MODULO
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_READ
    | TOKEN_WRITE
    | TOKEN_NOT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_L
    | TOKEN_G
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_INT
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aExpr
    | NONTERM_bExpr
    | NONTERM_assignableType
    | NONTERM_statement
    | NONTERM_declaration
    | NONTERM_expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | INTDECLARE  -> 1 
  | FST  -> 2 
  | SND  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | ARRAYDECLARESTART  -> 6 
  | ARRAYDECLAREEND  -> 7 
  | CURLYSTART  -> 8 
  | CURLYEND  -> 9 
  | COMMA  -> 10 
  | DOT  -> 11 
  | PLUS  -> 12 
  | MINUS  -> 13 
  | MULTIPLY  -> 14 
  | DIVIDE  -> 15 
  | POWER  -> 16 
  | MODULO  -> 17 
  | WHILE  -> 18 
  | IF  -> 19 
  | ELSE  -> 20 
  | SEMI  -> 21 
  | ASSIGN  -> 22 
  | READ  -> 23 
  | WRITE  -> 24 
  | NOT  -> 25 
  | EQ  -> 26 
  | NEQ  -> 27 
  | L  -> 28 
  | G  -> 29 
  | LE  -> 30 
  | GE  -> 31 
  | AND  -> 32 
  | OR  -> 33 
  | TRUE  -> 34 
  | FALSE  -> 35 
  | INT _ -> 36 
  | VAR _ -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_INTDECLARE 
  | 2 -> TOKEN_FST 
  | 3 -> TOKEN_SND 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_ARRAYDECLARESTART 
  | 7 -> TOKEN_ARRAYDECLAREEND 
  | 8 -> TOKEN_CURLYSTART 
  | 9 -> TOKEN_CURLYEND 
  | 10 -> TOKEN_COMMA 
  | 11 -> TOKEN_DOT 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_MINUS 
  | 14 -> TOKEN_MULTIPLY 
  | 15 -> TOKEN_DIVIDE 
  | 16 -> TOKEN_POWER 
  | 17 -> TOKEN_MODULO 
  | 18 -> TOKEN_WHILE 
  | 19 -> TOKEN_IF 
  | 20 -> TOKEN_ELSE 
  | 21 -> TOKEN_SEMI 
  | 22 -> TOKEN_ASSIGN 
  | 23 -> TOKEN_READ 
  | 24 -> TOKEN_WRITE 
  | 25 -> TOKEN_NOT 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_NEQ 
  | 28 -> TOKEN_L 
  | 29 -> TOKEN_G 
  | 30 -> TOKEN_LE 
  | 31 -> TOKEN_GE 
  | 32 -> TOKEN_AND 
  | 33 -> TOKEN_OR 
  | 34 -> TOKEN_TRUE 
  | 35 -> TOKEN_FALSE 
  | 36 -> TOKEN_INT 
  | 37 -> TOKEN_VAR 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_aExpr 
    | 3 -> NONTERM_aExpr 
    | 4 -> NONTERM_aExpr 
    | 5 -> NONTERM_aExpr 
    | 6 -> NONTERM_aExpr 
    | 7 -> NONTERM_aExpr 
    | 8 -> NONTERM_aExpr 
    | 9 -> NONTERM_aExpr 
    | 10 -> NONTERM_aExpr 
    | 11 -> NONTERM_aExpr 
    | 12 -> NONTERM_aExpr 
    | 13 -> NONTERM_aExpr 
    | 14 -> NONTERM_bExpr 
    | 15 -> NONTERM_bExpr 
    | 16 -> NONTERM_bExpr 
    | 17 -> NONTERM_bExpr 
    | 18 -> NONTERM_bExpr 
    | 19 -> NONTERM_bExpr 
    | 20 -> NONTERM_bExpr 
    | 21 -> NONTERM_bExpr 
    | 22 -> NONTERM_bExpr 
    | 23 -> NONTERM_bExpr 
    | 24 -> NONTERM_bExpr 
    | 25 -> NONTERM_bExpr 
    | 26 -> NONTERM_assignableType 
    | 27 -> NONTERM_assignableType 
    | 28 -> NONTERM_assignableType 
    | 29 -> NONTERM_assignableType 
    | 30 -> NONTERM_statement 
    | 31 -> NONTERM_statement 
    | 32 -> NONTERM_statement 
    | 33 -> NONTERM_statement 
    | 34 -> NONTERM_statement 
    | 35 -> NONTERM_statement 
    | 36 -> NONTERM_statement 
    | 37 -> NONTERM_statement 
    | 38 -> NONTERM_declaration 
    | 39 -> NONTERM_declaration 
    | 40 -> NONTERM_declaration 
    | 41 -> NONTERM_declaration 
    | 42 -> NONTERM_expr 
    | 43 -> NONTERM_expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | INTDECLARE  -> "INTDECLARE" 
  | FST  -> "FST" 
  | SND  -> "SND" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | ARRAYDECLARESTART  -> "ARRAYDECLARESTART" 
  | ARRAYDECLAREEND  -> "ARRAYDECLAREEND" 
  | CURLYSTART  -> "CURLYSTART" 
  | CURLYEND  -> "CURLYEND" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULTIPLY  -> "MULTIPLY" 
  | DIVIDE  -> "DIVIDE" 
  | POWER  -> "POWER" 
  | MODULO  -> "MODULO" 
  | WHILE  -> "WHILE" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | SEMI  -> "SEMI" 
  | ASSIGN  -> "ASSIGN" 
  | READ  -> "READ" 
  | WRITE  -> "WRITE" 
  | NOT  -> "NOT" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | L  -> "L" 
  | G  -> "G" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | INT _ -> "INT" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | INTDECLARE  -> (null : System.Object) 
  | FST  -> (null : System.Object) 
  | SND  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | ARRAYDECLARESTART  -> (null : System.Object) 
  | ARRAYDECLAREEND  -> (null : System.Object) 
  | CURLYSTART  -> (null : System.Object) 
  | CURLYEND  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULTIPLY  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | POWER  -> (null : System.Object) 
  | MODULO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | L  -> (null : System.Object) 
  | G  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 24us; 65535us; 25us; 5us; 26us; 6us; 27us; 7us; 28us; 8us; 29us; 9us; 30us; 10us; 31us; 11us; 32us; 12us; 35us; 13us; 48us; 14us; 49us; 14us; 50us; 14us; 51us; 15us; 52us; 16us; 53us; 17us; 54us; 18us; 55us; 19us; 56us; 20us; 59us; 21us; 65us; 22us; 68us; 23us; 69us; 24us; 79us; 14us; 85us; 14us; 6us; 65535us; 32us; 45us; 48us; 42us; 49us; 43us; 50us; 44us; 79us; 46us; 85us; 47us; 11us; 65535us; 0us; 64us; 81us; 64us; 82us; 64us; 87us; 64us; 88us; 64us; 91us; 64us; 92us; 64us; 94us; 64us; 95us; 64us; 96us; 64us; 115us; 64us; 11us; 65535us; 0us; 96us; 81us; 82us; 82us; 94us; 87us; 88us; 88us; 94us; 91us; 92us; 92us; 94us; 94us; 94us; 95us; 94us; 96us; 94us; 115us; 95us; 3us; 65535us; 0us; 115us; 114us; 114us; 115us; 114us; 1us; 65535us; 0us; 2us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 28us; 35us; 47us; 59us; 63us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 7us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 7us; 3us; 4us; 4us; 5us; 6us; 7us; 8us; 7us; 3us; 4us; 5us; 5us; 6us; 7us; 8us; 7us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 7us; 3us; 4us; 5us; 6us; 7us; 7us; 8us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 13us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 19us; 20us; 21us; 22us; 23us; 24us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 11us; 12us; 3us; 4us; 5us; 6us; 7us; 8us; 19us; 20us; 21us; 22us; 23us; 24us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 19us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 20us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 21us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 22us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 23us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 24us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 27us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 30us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 31us; 7us; 3us; 4us; 5us; 6us; 7us; 8us; 31us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 9us; 25us; 1us; 9us; 4us; 10us; 11us; 12us; 13us; 1us; 11us; 1us; 11us; 2us; 12us; 13us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 3us; 16us; 16us; 17us; 3us; 16us; 17us; 17us; 3us; 16us; 17us; 18us; 3us; 16us; 17us; 25us; 3us; 16us; 17us; 34us; 4us; 16us; 17us; 35us; 36us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 5us; 26us; 27us; 28us; 29us; 31us; 1us; 27us; 1us; 27us; 2us; 28us; 29us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 2us; 34us; 37us; 1us; 34us; 2us; 35us; 36us; 2us; 35us; 36us; 2us; 35us; 36us; 2us; 35us; 36us; 3us; 35us; 36us; 37us; 2us; 35us; 36us; 1us; 36us; 1us; 36us; 2us; 36us; 37us; 1us; 36us; 2us; 37us; 37us; 2us; 37us; 42us; 2us; 37us; 43us; 2us; 38us; 39us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 2us; 41us; 41us; 2us; 41us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 18us; 26us; 34us; 42us; 50us; 58us; 66us; 80us; 88us; 101us; 109us; 117us; 125us; 133us; 141us; 149us; 157us; 165us; 173us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 198us; 200us; 205us; 207us; 209us; 212us; 214us; 216us; 218us; 220us; 224us; 228us; 232us; 236us; 240us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 271us; 273us; 275us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 321us; 323us; 326us; 329us; 332us; 335us; 339us; 342us; 344us; 346us; 349us; 351us; 354us; 357us; 360us; 363us; 365us; 367us; 369us; 371us; 373us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 398us; |]
let _fsyacc_action_rows = 116
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 97us; 8us; 105us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 16us; 29us; 1us; 16388us; 16us; 29us; 4us; 16389us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 4us; 16390us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 1us; 16391us; 16us; 29us; 1us; 16392us; 16us; 29us; 7us; 32768us; 5us; 33us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 13us; 32768us; 5us; 33us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 26us; 51us; 27us; 52us; 28us; 55us; 29us; 53us; 30us; 56us; 31us; 54us; 7us; 32768us; 7us; 36us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 12us; 32768us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 26us; 51us; 27us; 52us; 28us; 55us; 29us; 53us; 30us; 56us; 31us; 54us; 6us; 16403us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 6us; 16404us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 6us; 16405us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 6us; 16406us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 6us; 16407us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 6us; 16408us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 7us; 32768us; 7us; 60us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 7us; 32768us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 21us; 66us; 7us; 32768us; 10us; 69us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 7us; 32768us; 5us; 70us; 12us; 27us; 13us; 28us; 14us; 25us; 15us; 26us; 16us; 29us; 17us; 30us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 6us; 32768us; 4us; 32us; 25us; 50us; 34us; 40us; 35us; 41us; 36us; 4us; 37us; 34us; 0us; 16393us; 2us; 16394us; 6us; 35us; 11us; 37us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 0us; 16395us; 2us; 32768us; 2us; 38us; 3us; 39us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 1us; 16401us; 32us; 48us; 0us; 16402us; 3us; 32768us; 5us; 57us; 32us; 48us; 33us; 49us; 3us; 32768us; 5us; 80us; 32us; 48us; 33us; 49us; 3us; 32768us; 5us; 86us; 32us; 48us; 33us; 49us; 6us; 32768us; 4us; 32us; 25us; 50us; 34us; 40us; 35us; 41us; 36us; 4us; 37us; 34us; 6us; 32768us; 4us; 32us; 25us; 50us; 34us; 40us; 35us; 41us; 36us; 4us; 37us; 34us; 6us; 32768us; 4us; 32us; 25us; 50us; 34us; 40us; 35us; 41us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 0us; 16409us; 2us; 16410us; 6us; 59us; 11us; 61us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 0us; 16411us; 2us; 32768us; 2us; 62us; 3us; 63us; 0us; 16412us; 0us; 16413us; 1us; 32768us; 22us; 65us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 0us; 16414us; 1us; 32768us; 4us; 68us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 3us; 32768us; 4us; 31us; 36us; 4us; 37us; 34us; 1us; 32768us; 21us; 71us; 0us; 16415us; 1us; 32768us; 37us; 73us; 1us; 32768us; 21us; 74us; 0us; 16416us; 1us; 32768us; 37us; 76us; 1us; 32768us; 21us; 77us; 0us; 16417us; 1us; 32768us; 4us; 79us; 6us; 32768us; 4us; 32us; 25us; 50us; 34us; 40us; 35us; 41us; 36us; 4us; 37us; 34us; 1us; 32768us; 8us; 81us; 5us; 32768us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 6us; 32768us; 9us; 83us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 0us; 16418us; 1us; 32768us; 4us; 85us; 6us; 32768us; 4us; 32us; 25us; 50us; 34us; 40us; 35us; 41us; 36us; 4us; 37us; 34us; 1us; 32768us; 8us; 87us; 5us; 32768us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 6us; 32768us; 9us; 89us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 1us; 16419us; 20us; 90us; 1us; 32768us; 8us; 91us; 5us; 32768us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 6us; 32768us; 9us; 93us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 0us; 16420us; 0us; 16421us; 5us; 16426us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 5us; 16427us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; 2us; 32768us; 6us; 100us; 37us; 98us; 1us; 32768us; 21us; 99us; 0us; 16422us; 1us; 32768us; 36us; 101us; 1us; 32768us; 7us; 102us; 1us; 32768us; 37us; 103us; 1us; 32768us; 21us; 104us; 0us; 16423us; 1us; 32768us; 1us; 106us; 1us; 32768us; 2us; 107us; 1us; 32768us; 21us; 108us; 1us; 32768us; 1us; 109us; 1us; 32768us; 3us; 110us; 1us; 32768us; 9us; 111us; 1us; 32768us; 37us; 112us; 1us; 32768us; 21us; 113us; 0us; 16424us; 0us; 16425us; 7us; 32768us; 1us; 97us; 8us; 105us; 18us; 78us; 19us; 84us; 23us; 72us; 24us; 75us; 37us; 58us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 11us; 12us; 13us; 15us; 17us; 22us; 27us; 29us; 31us; 39us; 53us; 61us; 74us; 81us; 88us; 95us; 102us; 109us; 116us; 124us; 132us; 140us; 148us; 152us; 156us; 160us; 164us; 168us; 172us; 176us; 183us; 184us; 187us; 191us; 192us; 195us; 196us; 197us; 198us; 199us; 200us; 202us; 203us; 207us; 211us; 215us; 222us; 229us; 236us; 240us; 244us; 248us; 252us; 256us; 260us; 261us; 264us; 268us; 269us; 272us; 273us; 274us; 276us; 280us; 281us; 283us; 287us; 291us; 293us; 294us; 296us; 298us; 299us; 301us; 303us; 304us; 306us; 313us; 315us; 321us; 328us; 329us; 331us; 338us; 340us; 346us; 353us; 355us; 357us; 363us; 370us; 371us; 372us; 378us; 384us; 387us; 389us; 390us; 392us; 394us; 396us; 398us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; 413us; 415us; 416us; 417us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 4us; 3us; 3us; 1us; 1us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 4us; 3us; 3us; 4us; 8us; 3us; 3us; 7us; 7us; 11us; 2us; 3us; 6us; 9us; 2us; 2us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 16395us; 65535us; 16396us; 16397us; 16398us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 16411us; 65535us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 337 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 346 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "MicroCParser.fsy"
                                          _1 
                   )
# 44 "MicroCParser.fsy"
                 : expr));
# 357 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "MicroCParser.fsy"
                                      N(_1) 
                   )
# 47 "MicroCParser.fsy"
                 : aExpr));
# 368 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "MicroCParser.fsy"
                                               Multiply(_1,_3) 
                   )
# 48 "MicroCParser.fsy"
                 : aExpr));
# 380 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "MicroCParser.fsy"
                                             Divide(_1,_3) 
                   )
# 49 "MicroCParser.fsy"
                 : aExpr));
# 392 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "MicroCParser.fsy"
                                            Plus(_1,_3) 
                   )
# 50 "MicroCParser.fsy"
                 : aExpr));
# 404 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "MicroCParser.fsy"
                                             Minus(_1,_3) 
                   )
# 51 "MicroCParser.fsy"
                 : aExpr));
# 416 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "MicroCParser.fsy"
                                             Pow(_1,_3)
                   )
# 52 "MicroCParser.fsy"
                 : aExpr));
# 428 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "MicroCParser.fsy"
                                                   Modulo(_1, _3) 
                   )
# 53 "MicroCParser.fsy"
                 : aExpr));
# 440 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "MicroCParser.fsy"
                                           _2 
                   )
# 54 "MicroCParser.fsy"
                 : aExpr));
# 451 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "MicroCParser.fsy"
                                                Var(_1)
                   )
# 55 "MicroCParser.fsy"
                 : aExpr));
# 462 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "MicroCParser.fsy"
                                                                           Arr(_1, _3)
                   )
# 56 "MicroCParser.fsy"
                 : aExpr));
# 474 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "MicroCParser.fsy"
                                                   RecordEntry(_1, 1)
                   )
# 57 "MicroCParser.fsy"
                 : aExpr));
# 485 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "MicroCParser.fsy"
                                                   RecordEntry(_1, 2)
                   )
# 58 "MicroCParser.fsy"
                 : aExpr));
# 496 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "MicroCParser.fsy"
                                    True 
                   )
# 61 "MicroCParser.fsy"
                 : bExpr));
# 506 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "MicroCParser.fsy"
                                    False 
                   )
# 62 "MicroCParser.fsy"
                 : bExpr));
# 516 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "MicroCParser.fsy"
                                           And(_1,_3) 
                   )
# 63 "MicroCParser.fsy"
                 : bExpr));
# 528 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "MicroCParser.fsy"
                                          Or(_1,_3) 
                   )
# 64 "MicroCParser.fsy"
                 : bExpr));
# 540 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "MicroCParser.fsy"
                                       Not(_2) 
                   )
# 65 "MicroCParser.fsy"
                 : bExpr));
# 551 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "MicroCParser.fsy"
                                          Eq(_1,_3) 
                   )
# 66 "MicroCParser.fsy"
                 : bExpr));
# 563 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "MicroCParser.fsy"
                                           Neq(_1,_3) 
                   )
# 67 "MicroCParser.fsy"
                 : bExpr));
# 575 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "MicroCParser.fsy"
                                          Great(_1,_3) 
                   )
# 68 "MicroCParser.fsy"
                 : bExpr));
# 587 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "MicroCParser.fsy"
                                          Ge(_1,_3) 
                   )
# 69 "MicroCParser.fsy"
                 : bExpr));
# 599 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "MicroCParser.fsy"
                                          Less(_1,_3) 
                   )
# 70 "MicroCParser.fsy"
                 : bExpr));
# 611 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "MicroCParser.fsy"
                                          Le(_1,_3) 
                   )
# 71 "MicroCParser.fsy"
                 : bExpr));
# 623 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "MicroCParser.fsy"
                                           _2 
                   )
# 72 "MicroCParser.fsy"
                 : bExpr));
# 634 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "MicroCParser.fsy"
                                                   VariableA(_1) 
                   )
# 75 "MicroCParser.fsy"
                 : assignableType));
# 645 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "MicroCParser.fsy"
                                                                         ArrA(_1, _3)
                   )
# 76 "MicroCParser.fsy"
                 : assignableType));
# 657 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "MicroCParser.fsy"
                                                       RecordEntryA(_1, 1) 
                   )
# 77 "MicroCParser.fsy"
                 : assignableType));
# 668 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "MicroCParser.fsy"
                                                       RecordEntryA(_1, 2) 
                   )
# 78 "MicroCParser.fsy"
                 : assignableType));
# 679 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : assignableType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "MicroCParser.fsy"
                                                              Assign(_1, _3) 
                   )
# 82 "MicroCParser.fsy"
                 : statement));
# 691 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : aExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "MicroCParser.fsy"
                                                                         AssignRecord(_1, _4, _6) 
                   )
# 83 "MicroCParser.fsy"
                 : statement));
# 704 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "MicroCParser.fsy"
                                                  Read(_2)
                   )
# 84 "MicroCParser.fsy"
                 : statement));
# 715 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "MicroCParser.fsy"
                                                  Write(_2)
                   )
# 85 "MicroCParser.fsy"
                 : statement));
# 726 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "MicroCParser.fsy"
                                                                                 While(_3, _6) 
                   )
# 86 "MicroCParser.fsy"
                 : statement));
# 738 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "MicroCParser.fsy"
                                                                                       If(_3, _6) 
                   )
# 87 "MicroCParser.fsy"
                 : statement));
# 750 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "MicroCParser.fsy"
                                                                                                                            IfE(_3, _6, _10) 
                   )
# 88 "MicroCParser.fsy"
                 : statement));
# 763 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "MicroCParser.fsy"
                                                                 ContinuedS(_1, _2) 
                   )
# 89 "MicroCParser.fsy"
                 : statement));
# 775 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "MicroCParser.fsy"
                                                 IntegerD(_2) 
                   )
# 92 "MicroCParser.fsy"
                 : declaration));
# 786 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "MicroCParser.fsy"
                                                                                       ArrD(_5, _3) 
                   )
# 93 "MicroCParser.fsy"
                 : declaration));
# 798 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "MicroCParser.fsy"
                                                                                             RecordD(_8) 
                   )
# 94 "MicroCParser.fsy"
                 : declaration));
# 809 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : declaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "MicroCParser.fsy"
                                                                     ContinuedD(_1, _2) 
                   )
# 95 "MicroCParser.fsy"
                 : declaration));
# 821 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : declaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "MicroCParser.fsy"
                                                   DS(_1, _2) 
                   )
# 98 "MicroCParser.fsy"
                 : expr));
# 833 "MicroCParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "MicroCParser.fsy"
                                       S(_1) 
                   )
# 99 "MicroCParser.fsy"
                 : expr));
|]
# 845 "MicroCParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
