// Signature file for parser generated by fsyacc
module MicroCParser
type token = 
  | EOF
  | INTDECLARE
  | FST
  | SND
  | LPAR
  | RPAR
  | ARRAYDECLARESTART
  | ARRAYDECLAREEND
  | CURLYSTART
  | CURLYEND
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | POWER
  | MODULO
  | WHILE
  | IF
  | ELSE
  | SEMI
  | ASSIGN
  | READ
  | WRITE
  | NOT
  | EQ
  | NEQ
  | L
  | G
  | LE
  | GE
  | AND
  | OR
  | TRUE
  | FALSE
  | INT of (int)
  | VAR of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INTDECLARE
    | TOKEN_FST
    | TOKEN_SND
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_ARRAYDECLARESTART
    | TOKEN_ARRAYDECLAREEND
    | TOKEN_CURLYSTART
    | TOKEN_CURLYEND
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULTIPLY
    | TOKEN_DIVIDE
    | TOKEN_POWER
    | TOKEN_MODULO
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_READ
    | TOKEN_WRITE
    | TOKEN_NOT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_L
    | TOKEN_G
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_INT
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aExpr
    | NONTERM_bExpr
    | NONTERM_assignableType
    | NONTERM_statement
    | NONTERM_declaration
    | NONTERM_expr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (expr) 
